/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/assets/src/frontend/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/assets/src/frontend/index.js":
/*!******************************************!*\
  !*** ./src/assets/src/frontend/index.js ***!
  \******************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _scss_main_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scss/main.scss */ "./src/assets/src/frontend/scss/main.scss");
/* harmony import */ var _scss_main_scss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_scss_main_scss__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _js_calendar_app_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./js/calendar-app.js */ "./src/assets/src/frontend/js/calendar-app.js");


 // Do on DOM ready

document.addEventListener('DOMContentLoaded', function () {
  new _js_calendar_app_js__WEBPACK_IMPORTED_MODULE_1__["default"]();
});

/***/ }),

/***/ "./src/assets/src/frontend/js/calendar-app.js":
/*!****************************************************!*\
  !*** ./src/assets/src/frontend/js/calendar-app.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var CalendarApp =
/*#__PURE__*/
function () {
  function CalendarApp() {
    _classCallCheck(this, CalendarApp);

    // stores registrations returned from retreat guru
    this.registrations = {}; // stores registrations returned from retreat guru

    this.AdditionalRegistrationData = {}; // Store registration data per date

    this.calendarDayData = {}; // Store registration data per date

    this.daysAvailable = 0; // get all day elements

    this.days = document.querySelectorAll(".days li a"); // store the current registration being viewed

    this.currentRegistration = 0; // last day clicked

    this.lastDayClicked = false; // load and save rest data

    this.loadRegistrations();
    this.addEvents();
  }

  _createClass(CalendarApp, [{
    key: "loadRegistrations",
    value: function loadRegistrations() {
      var _this = this;

      // Get the registration data from retreat guru
      fetch('https://demo14.secure.retreat.guru/api/v1/registrations?token=ef061e1a717568ee5ca5c76a94cf5842', {
        method: 'get'
      }).then(function (response) {
        // get the json body
        return response.json();
      }).then(function (data) {
        if ("error" in data) {
          // Do something with the error
          alert(data.error);
        } else {
          // store the data
          _this.registrations = data; // Normalize data

          _this.normalizeData(); // load the data into the UI


          _this.loadUI();
        }
      }).catch(function (err) {
        // do something with the error
        console.log(err);
        alert(err);
      }); // Get the registration data from retreat guru

      fetch('http://instinctive-bear.flywheelsites.com/calendar/', {
        method: 'get'
      }).then(function (response) {
        // get the json body
        return response.json();
      }).then(function (data) {
        if ("error" in data) {
          // Do something with the error
          alert(data.error);
        } else {
          // store the data
          _this.AdditionalRegistrationData = data;
        }
      }).catch(function (err) {
        // do something with the error
        console.log(err);
        alert(err);
      });
    }
  }, {
    key: "addEvents",
    value: function addEvents() {
      var _this2 = this;

      document.getElementById('retreat-calendar-guest-name').addEventListener("change", function (event) {
        // get registration ID
        var registrationId = event.target.value;
        var detailsStatus = document.getElementById('retreat-calendar-status');
        var detailsFrom = document.getElementById('retreat-calendar-from');
        var detailsTo = document.getElementById('retreat-calendar-to'); // loop through registration and find the first registration ID that matches and fill the side bar
        // keep looping add add the other names to the select name drop down

        _this2.registrations.forEach(function (registration) {
          if (registrationId === registration.id.toString()) {
            _this2.currentRegistration = registration.id;
            detailsStatus.innerText = registration.status;
            detailsFrom.innerText = registration.start_date;
            detailsTo.innerText = registration.end_date;

            _this2.setDetailsColColor(registration.status);

            _this2.setAdditionalInfo(registration.id);
          }
        });
      });
      document.getElementById('retreat-calendar-flight-info').addEventListener("blur", function (event) {
        _this2.saveData('flight-info', event);
      });
      document.getElementById('retreat-calendar-select-diet').addEventListener("change", function (event) {
        _this2.saveData('diet', event);
      });
      document.getElementById('retreat-calendar-add-yoga').addEventListener("change", function (event) {
        _this2.saveData('yoga', event);
      });
      document.getElementById('retreat-calendar-add-juice').addEventListener("change", function (event) {
        _this2.saveData('juice', event);
      });
      document.getElementById('retreat-calendar-add-massage').addEventListener("change", function (event) {
        _this2.saveData('massage', event);
      });
      document.getElementById('retreat-calendar-add-breath').addEventListener("change", function (event) {
        _this2.saveData('breath', event);
      });
    }
  }, {
    key: "saveData",
    value: function saveData(key, event) {
      var _this3 = this;

      event.target.disabled = true;
      var value;

      if ('checkbox' === event.target.type) {
        value = event.target.checked;
      } else {
        value = event.target.value;
      } // Get the registration data from retreat guru


      fetch('http://instinctive-bear.flywheelsites.com/calendar/?registrationID=' + this.currentRegistration + '&key=' + key + '&value=' + value, {
        method: 'get'
      }).then(function (response) {
        // get the json body
        return response.json();
      }).then(function (data) {
        if ("error" in data) {
          // Do something with the error
          alert(data.error);
        } else {
          // store the data
          _this3.AdditionalRegistrationData = data;
          event.target.disabled = false;
        }
      }).catch(function (err) {
        // do something with the error
        console.log(err);
        alert(err);
      });
    }
  }, {
    key: "normalizeData",
    value: function normalizeData() {
      var _this4 = this;

      _toConsumableArray(this.registrations).forEach(function (registration) {
        if (6 !== registration.room_id) {
          return;
        }

        var startDate = new Date(registration.start_date + " 00:00:00 GMT-0700");
        var endDate = new Date(registration.end_date + " 00:00:00 GMT-0700");

        _this4.getDates(startDate, endDate).forEach(function (date) {
          var registrationDate = _this4.dateToYMD(date);

          if (!(registrationDate in _this4.calendarDayData)) {
            _this4.calendarDayData[registrationDate] = {
              registrationIds: [],
              names: [],
              status: {
                occupied: false,
                pending: false
              }
            };
          }

          _this4.calendarDayData[registrationDate].registrationIds.push(registration.id);

          _this4.calendarDayData[registrationDate].names.push(registration.full_name);

          if ("reserved" === registration.status) {
            _this4.calendarDayData[registrationDate].status.occupied = true;
          }

          if ("pending" === registration.status) {
            _this4.calendarDayData[registrationDate].status.pending = true;
          }
        });
      });
    }
  }, {
    key: "loadUI",
    value: function loadUI() {
      var _this5 = this;

      _toConsumableArray(this.days).forEach(function (day) {
        var date = day.dataset.day;

        if (date in _this5.calendarDayData) {
          day.dataset.registrationIds = _this5.calendarDayData[date].registrationIds.join(',');
          day.setAttribute('title', _this5.calendarDayData[date].names.join(','));
          day.classList.add(_this5.getStatusClass(_this5.calendarDayData[date].status));
          day.addEventListener("click", function (event) {
            if (_this5.lastDayClicked) {
              _this5.lastDayClicked.classList.remove('selected');
            }

            _this5.lastDayClicked = event.target;
            event.target.classList.add('selected'); // get registration IDs

            var registrationIds = event.target.dataset.registrationIds.split(',');
            var firstRegistrationPopulated = false;
            var detailsSelectNames = document.getElementById('retreat-calendar-guest-name');
            var detailsStatus = document.getElementById('retreat-calendar-status');
            var detailsFrom = document.getElementById('retreat-calendar-from');
            var detailsTo = document.getElementById('retreat-calendar-to'); // loop through registration and find the first registration ID that matches and fill the side bar
            // keep looping add add the other names to the select name drop down

            _this5.registrations.forEach(function (registration) {
              if (registrationIds.includes(registration.id.toString())) {
                if (!firstRegistrationPopulated) {
                  _this5.currentRegistration = registration.id;
                  detailsSelectNames.options.length = 0;
                  detailsStatus.innerText = registration.status;
                  detailsFrom.innerText = registration.start_date;
                  detailsTo.innerText = registration.end_date;
                  firstRegistrationPopulated = true;

                  _this5.setDetailsColColor(registration.status);

                  _this5.setAdditionalInfo(registration.id);
                }

                var option = document.createElement('option');
                option.value = registration.id;
                option.innerHTML = registration.full_name;
                detailsSelectNames.appendChild(option);
              }
            });
          });
        } else if ('' !== date) {
          _this5.daysAvailable++;
        }
      });

      document.getElementById('retreat-calendar-days-available').innerText = this.daysAvailable + ' available days';
    }
  }, {
    key: "getStatusClass",
    value: function getStatusClass(status) {
      if (status.pending && status.occupied) {
        return 'pending-occupied';
      }

      if (status.pending) {
        this.daysAvailable++;
        return 'pending';
      }

      if (status.occupied) {
        return 'occupied';
      }

      return '';
    }
  }, {
    key: "setDetailsColColor",
    value: function setDetailsColColor(status) {
      var detailsColumn = document.getElementById('retreat-calendar--col-details');

      if ('pending' === status) {
        detailsColumn.classList.remove('retreat-calendar--col-occupied');
        detailsColumn.classList.add('retreat-calendar--col-pending');
      }

      if ('reserved' === status) {
        detailsColumn.classList.remove('retreat-calendar--col-pending');
        detailsColumn.classList.add('retreat-calendar--col-occupied');
      }
    }
  }, {
    key: "setAdditionalInfo",
    value: function setAdditionalInfo(regId) {
      var flight = document.getElementById('retreat-calendar-flight-info');
      flight.value = '';
      var diet = document.getElementById('retreat-calendar-select-diet');
      diet.value = 'none';
      var yoga = document.getElementById('retreat-calendar-add-yoga');
      yoga.checked = false;
      var juice = document.getElementById('retreat-calendar-add-juice');
      juice.checked = false;
      var massage = document.getElementById('retreat-calendar-add-massage');
      massage.checked = false;
      var breath = document.getElementById('retreat-calendar-add-breath');
      breath.checked = false;

      if (regId in this.AdditionalRegistrationData) {
        if ('flight-info' in this.AdditionalRegistrationData[regId]) {
          flight.value = this.AdditionalRegistrationData[regId]['flight-info'];
        }

        if ('diet' in this.AdditionalRegistrationData[regId]) {
          diet.value = this.AdditionalRegistrationData[regId]['diet'];
        }

        if ('yoga' in this.AdditionalRegistrationData[regId]) {
          if ('true' === this.AdditionalRegistrationData[regId]['yoga']) {
            yoga.checked = true;
          }
        }

        if ('juice' in this.AdditionalRegistrationData[regId]) {
          if ('true' === this.AdditionalRegistrationData[regId]['juice']) {
            juice.checked = true;
          }
        }

        if ('massage' in this.AdditionalRegistrationData[regId]) {
          if ('true' === this.AdditionalRegistrationData[regId]['massage']) {
            massage.checked = true;
          }
        }

        if ('breath' in this.AdditionalRegistrationData[regId]) {
          if ('true' === this.AdditionalRegistrationData[regId]['breath']) {
            breath.checked = true;
          }
        }
      }
    }
  }, {
    key: "getDates",
    value: function getDates(startDate, endDate) {
      var dates = [];

      while (startDate < endDate) {
        dates = [].concat(_toConsumableArray(dates), [new Date(startDate)]);
        startDate.setDate(startDate.getDate() + 1);
      }

      return [].concat(_toConsumableArray(dates), [endDate]);
    }
  }, {
    key: "dateToYMD",
    value: function dateToYMD(date) {
      var d = date.getDate();
      var m = date.getMonth() + 1;
      var y = date.getFullYear();
      return '' + y + '-' + (m <= 9 ? '0' + m : m) + '-' + (d <= 9 ? '0' + d : d);
    }
  }]);

  return CalendarApp;
}();

/* harmony default export */ __webpack_exports__["default"] = (CalendarApp);

/***/ }),

/***/ "./src/assets/src/frontend/scss/main.scss":
/*!************************************************!*\
  !*** ./src/assets/src/frontend/scss/main.scss ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ })

/******/ });
//# sourceMappingURL=bundle.min.js.map